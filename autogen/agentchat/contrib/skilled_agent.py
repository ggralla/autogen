import ast
from typing import Dict, Optional

import chromadb
from chromadb import Settings
from autogen.agentchat.assistant_agent import ConversableAgent
from autogen.code_utils import extract_code


CHROMA_DIR = "./tmp/skilled_agent_db"


class SkilledAgent(ConversableAgent):
    """(Experimental) SkilledAgent, a subclass of ConversableAgent.
    Can learn skills by saving python functions to a vector database
    Can use skills to complete tasks, only retrieving relevant python functionsfrom the vector database."""

    def __init__(
        self,
        name: Optional[str] = "skilledagent",
        system_message: Optional[str] = None,
        memory_config: Optional[Dict] = {},
        **kwargs,
    ):
        if not system_message:
            system_message = """You are a helpful and expert AI assistant.
Solve tasks using your coding and language skills.
Suggest python code to solve the task.
 If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill.
When using code, you must indicate the script type in the code block. The user cannot provide any other feedback or perform any other action beyond executing the code you suggest. The user can't modify your code. So do not suggest incomplete code which requires users to modify. Don't use a code block if it's not intended to be executed by the user.
If you want the user to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask users to copy and paste the result. Instead, use 'print' function for the output when relevant. Check the execution result returned by the user.
If the result indicates there is an error, fix the error and output the code again. Suggest the full code instead of partial code or code changes. If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try.
When you find an answer, verify the answer carefully. Include verifiable evidence in your response if possible.
Confirm that any code is executed successfully and provides the expected
Reply "TERMINATE" in the end when everything is done.
    """
        super().__init__(name=name, system_message=system_message, **kwargs)

        # Valid functions will be tracked here to be saved/remembered later
        self.generated_functions = []

        # Assemble the vector db settings.
        self._memory_config = memory_config
        self.verbosity = self._memory_config.get("verbosity", 0)
        self.reset_db = self._memory_config.get("reset_db", False)
        self.recall_threshold = self._memory_config.get("recall_threshold", 1.5)
        self.max_num_retrievals = self._memory_config.get("max_num_retrievals", 10)
        # create the vector db
        self.function_store = FunctionStore(reset=self.reset_db)
        self.use_skills = False

    # Hook in to generate_reply to save any generated functions
    def generate_reply(self, **kwargs):
        if self.use_skills:
            messages = kwargs["messages"]
            prompt = messages[-1]["content"]
            relevant_functions = self.function_store.get_relevant_functions(
                prompt,
                n_results=self.max_num_retrievals,
                threshold=self.recall_threshold,
            )
            if relevant_functions:
                function_block = ""
                for func_name, func_code in relevant_functions:
                    function_block += (
                        FunctionStore.extract_function_signature(func_code)
                        + "\n"
                        + FunctionStore.extract_docstring(func_code)
                        + "\n"
                    )
                messages += [
                    {
                        "role": "system",
                        "content": f"You may make use of the following Python functions: {function_block}. Assume that the functions are already imported.",
                    }
                ]

        ret = super().generate_reply(**kwargs)
        found_code = extract_code(ret)
        for language, code in found_code:
            if language == "python":
                self.generated_functions.append(code)
        return ret

    def remember_latest_function(self):
        """Remembers the latest function generated by the agent."""
        if self.generated_functions:
            function_code = self.generated_functions[-1]
            function_name = FunctionStore.extract_function_signature(function_code)
            self._remember_function(function_name, function_code)

    def _remember_function(self, function_name, function_code):
        self.function_store.store_function(function_name, function_code)


class FunctionStore:
    @staticmethod
    def extract_function_signature(code):
        module = ast.parse(code)
        for node in module.body:
            if isinstance(node, ast.FunctionDef):
                return f"{node.name}({', '.join(arg.arg for arg in node.args.args)})"
        return None

    @staticmethod
    def extract_docstring(code):
        module = ast.parse(code)
        for node in module.body:
            if isinstance(node, ast.FunctionDef):
                return ast.get_docstring(node)
        return None

    def __init__(self, reset: bool) -> None:
        settings = Settings(
            anonymized_telemetry=False, allow_reset=True, is_persistent=True, persist_directory=CHROMA_DIR
        )
        self.db_client = chromadb.Client(settings)
        self.vec_db = self.db_client.create_collection("functions", get_or_create=True)  # The collection is the DB.

    def store_function(self, function_name, function):
        self.vec_db.add(documents=[function], ids=[function_name])
        print(
            "Function stored in vector database:\n  FUNCTION NAME\n    {}\n  FUNCTION\n    {}".format(
                function_name, function
            )
        )

    def get_relevant_functions(self, query_text, n_results=5, threshold=1.5):
        """Retrieves functions that are related to the given query text within the specified distance threshold."""
        results = self.vec_db.query(query_texts=[query_text], n_results=n_results)
        functions = []
        num_results = len(results["ids"][0])
        for i in range(num_results):
            function_name, function, distance = (
                results["ids"][0][i],
                results["documents"][0][i],
                results["distances"][0][i],
            )
            if distance < threshold:
                print("Function retrieved from vector database: {}".format(function_name))
                """
                print(
                    "\nFUNCTION RETRIEVED FROM VECTOR DATABASE:\n  FUNCTION NAME\n    {}\n  FUNCTION\n    {}\n  DISTANCE\n    {}".format(
                        function_name, function, distance
                    )
                )
                """
                functions.append((function_name, function))
        return functions
